import random

class Device:
    """Represents a network device with a randomly generated MAC address."""
    def __init__(self, device_id):
        self.device_id = device_id
        self.mac = self.generate_mac()
        self.port = None
        self.data = None  # Stores received data

    def generate_mac(self):
        """Generates a random MAC address."""
        return ':'.join(f"{random.randint(0, 255):02X}" for _ in range(6)) #If the generated bytes are ["1A", "2B", "3C", "4D", "5E", "6F"], the MAC address will be "1A:2B:3C:4D:5E:6F".

    def __repr__(self):
        return f"Device-{self.device_id} | MAC: {self.mac}"


class Bridge:
    """Simulates a network bridge that connects up to 5 ports and forwards traffic based on MAC addresses."""
    
    MAX_PORTS = 2  # Limit bridge to 5 ports
    
    def __init__(self):
        self.mac_table = {}  # {MAC -> Port}
        self.ports = {}  # {Port -> Device}

    def connect_device(self, device, port):
        """Connects an end device to a specific port."""
        if port in self.ports:
            print(f"Port {port} is already occupied! Try another port.") #(port dictionary mai already mapping hai)
            return
        
        if any(dev.mac == device.mac for dev in self.ports.values()): #any one is true
            print(f"Device {device.device_id} ({device.mac}) is already connected to a port!") # Check if device is already connected (it will be present in the port dictionary)
            return

        self.ports[port] = device #map the device to the port
        device.port = port #update the port of the device
        print(f"Connected {device} to Port {port}")

    def receive_frame(self, src_mac, dest_mac, data):
        """Processes incoming frames and forwards them intelligently."""
        print(f"\nFrame received from {src_mac} -> {dest_mac}: {data}")
    
        # Find the port where the source MAC is connected
        src_port = None
        for port, device in self.ports.items(): # [(1, device A), (2, device B)...]
            if device.mac == src_mac:
                src_port = port
                break
            
        if src_port is None: # If the source MAC is not found
            print(f"Source MAC {src_mac} is unknown. Frame dropped.")  # Drop if unknown
            return
    
        # Learn the MAC address if not already in table
        if src_mac not in self.mac_table: #mac_table does not have the source mac
            print(f"Learning MAC {src_mac} on port {src_port}")
            self.mac_table[src_mac] = src_port #update the port mapping for the source mac in the mac table
    
        if dest_mac in self.mac_table: #if the destination mac is in the mac table
            # Known destination, unicast forwarding
            dest_port = self.mac_table[dest_mac]
            print(f"Forwarding frame to port {dest_port}")
            self.ports[dest_port].data = data #update the data of the device
            print(f"Message delivered to {dest_mac}: {data}")
        else:
            # Unknown destination, broadcast to all except sender
            print(f"MAC {dest_mac} not in table, broadcasting...")
            for port, device in self.ports.items():
                if device.mac != src_mac: # exclude the sender
                    device.data = data
                    print(f"Message broadcasted to {device.mac}")

    def display_mac_table(self):
        """Displays the MAC address table."""
        print("\nBridge MAC Table:")
        for mac, port in self.mac_table.items():
            print(f"ðŸ”¹ MAC: {mac} -> Port: {port}")


def bridge_simulation():
    """Runs the network bridge simulation."""
    bridge = Bridge()

    # Get number of devices
    num_devices = int(input("Enter number of devices (max 5): "))
    num_devices = min(num_devices, 5)  # Limit to 5 devices

    devices = [Device(i+1) for i in range(num_devices)] #{device 1, device 2...}

    # Display generated devices
    print("\nGenerated Devices:")
    for device in devices:
        print(device)

    # Connecting devices to the bridge
    print("\nConnect devices to ports:")
    for device in devices:
        while True:
            port = int(input(f"Enter port number (1-5) for {device.device_id}: "))
            if port < 1 or port > Bridge.MAX_PORTS:
                print("Invalid port! Please select between 1 and 5.")
                continue
            
            if port in bridge.ports: #already in ports dictionary
                print(f"Port {port} is already occupied! Try another.")
                continue
            
            bridge.connect_device(device, port)
            break  # Exit loop once valid port is assigned to each device

    # Display connected devices
    print("\nConnected Devices:")
    for port, device in bridge.ports.items():
        print(f"Port {port}: {device}")

    # Simulate frame transmission
    print("\nSimulate Frame Transmission")
    while True:
        src_port = int(input("Enter source device number: ")) - 1
        if src_port < 0 or src_port >= num_devices:
            print("Invalid device number! Try again.")
            continue
        
        dest_port = int(input("Enter destination device number: ")) - 1
        if dest_port < 0 or dest_port >= num_devices:
            print("Invalid device number! Try again.")
            continue
        
        message = input("Enter message to send: ")
        bridge.receive_frame(devices[src_port].mac, devices[dest_port].mac, message)

        cont = input("Do you want to send another frame? (y/n): ").lower()
        if cont != 'y':
            break

    # Display the MAC address table
    bridge.display_mac_table()


# Run the simulation if the script is executed directly
if __name__ == "__main__":
    bridge_simulation()
